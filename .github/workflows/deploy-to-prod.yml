name: Deploy Prosecco Party Frontend to Production
on:
  push:
    branches: [ main ]

# Adding top-level permissions for the workflow
# Meaning that the workflow can read the repository contents
permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
       
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
         
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
         
      - name: Get commit hashes and set image tags
        id: commits
        run: |
          CURRENT_COMMIT=$(git rev-parse HEAD)
          PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
          CURRENT_IMAGE="ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/prosecco-party-frontend:$CURRENT_COMMIT"
          PREVIOUS_IMAGE="ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/prosecco-party-frontend:$PREVIOUS_COMMIT"
          echo "current_commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
          echo "previous_commit=$PREVIOUS_COMMIT" >> $GITHUB_OUTPUT
          echo "current_image=$CURRENT_IMAGE" >> $GITHUB_OUTPUT
          echo "previous_image=$PREVIOUS_IMAGE" >> $GITHUB_OUTPUT
          echo "Deploying: $CURRENT_COMMIT"
          echo "Previous: $PREVIOUS_COMMIT"
          echo "Current image: $CURRENT_IMAGE"
          echo "Previous image: $PREVIOUS_IMAGE"
         
      - name: Deploy to server
        id: deploy
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          CURRENT_IMAGE: ${{ steps.commits.outputs.current_image }}
        run: |
          echo "Starting deployment..."
          
          ssh $SERVER_USER@$SERVER_IP "
            set -e
            echo 'Logging in to GHCR...'
            echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            echo 'Pulling latest image...'
            docker pull $CURRENT_IMAGE
            
            echo 'Stopping and removing existing container...'
            docker stop game-container || true
            docker rm -f game-container || true
            
            echo 'Starting new container...'
            docker run -d --name game-container -p 5173:4173 $CURRENT_IMAGE
          "
          
          echo "Deployment completed"
      
      - name: Health check
        id: health_check
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "Waiting for application to start..."
          sleep 30
          
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f https://proseccoparty.ch/ --connect-timeout 10; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check failed, retrying in 10 seconds..."
            sleep 10
          done
          
          echo "Health check failed after 5 attempts"
          exit 1
      
      - name: Rollback on any failure
        if: failure()
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          PREVIOUS_IMAGE: ${{ steps.commits.outputs.previous_image }}
        run: |
          echo "Deployment failed, rolling back to: ${{ steps.commits.outputs.previous_commit }}"
          
          ssh $SERVER_USER@$SERVER_IP "
            set -e
            echo 'Logging in to GHCR for rollback...'
            echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            echo 'Pulling previous image...'
            docker pull $PREVIOUS_IMAGE
            
            echo 'Stopping and removing failed container...'
            docker stop game-container || true
            docker rm -f game-container || true
            
            echo 'Starting rollback container...'
            docker run -d --name game-container -p 5173:4173 $PREVIOUS_IMAGE
          "
          
          echo "Rollback completed"
      
      - name: Verify rollback
        if: failure()
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "Verifying rollback..."
          sleep 20
          
          for i in {1..3}; do
            if curl -f https://proseccoparty.ch/ --connect-timeout 10; then
              echo "Rollback verification successful!"
              exit 0
            fi
            echo "Verification attempt $i failed, retrying..."
            sleep 10
          done
          
          echo "Rollback verification failed - manual intervention required!"
          exit 1
      
      - name: Fail job after rollback
        if: failure()
        run: |
          echo "Deployment failed and rollback completed"
          exit 1