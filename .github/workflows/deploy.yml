name: Deploy Name of the Game Frontend
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
# Adding top-level permissions for the workflow
permissions:
  contents: read
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
     
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          # Keep up to date with the Node.js version of the project
          node-version: '22.14.0'
         
      - name: Install dependencies
        run: npm ci
       
      - name: Run tests
        run: npm run test
       
  deploy:
    # Only run deploy job on push to main (not on pull requests)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # This ensures deploy only runs if test job succeeds
    needs: test
    runs-on: ubuntu-latest
    permissions:
      # Set permissions for the deploy job
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Fetch more history for rollback capability
          fetch-depth: 2
       
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
         
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
         
      - name: Get previous commit hash
        id: get_previous_commit
        run: |
          PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
          echo "previous_commit=$PREVIOUS_COMMIT" >> $GITHUB_OUTPUT
          echo "Previous commit: $PREVIOUS_COMMIT"
         
      - name: Deploy to server
        id: deploy
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
        run: |
          # Store the current commit hash
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Deploying commit: $CURRENT_COMMIT"
          
          # Deploy the new version
          ssh $SERVER_USER@$SERVER_IP "cd $SERVER_PATH && \
            git pull origin main && \
            docker build -t prosecco-party-vue:latest . && \
            docker build -t prosecco-party-vue:$CURRENT_COMMIT . && \
            docker stop game-container || true && \
            docker rm -f game-container || true && \
            docker run -d --name game-container -p 5173:4173 prosecco-party-vue:latest"
      
      - name: Health check
        id: health_check
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "Waiting for application to start..."
          sleep 30
          
          # Try to reach the application (adjust URL/port as needed)
          for i in {1..5}; do
            if curl -f https://proseccoparty.ch/ --connect-timeout 10; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          
          echo "Health check failed after 5 attempts"
          exit 1
      
      - name: Rollback on failure
        if: failure() && steps.deploy.conclusion == 'success'
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
          PREVIOUS_COMMIT: ${{ steps.get_previous_commit.outputs.previous_commit }}
        run: |
          echo "Deployment failed, rolling back to previous commit: $PREVIOUS_COMMIT"
          
          ssh $SERVER_USER@$SERVER_IP "cd $SERVER_PATH && \
            git checkout $PREVIOUS_COMMIT && \
            docker build -t prosecco-party-vue:rollback . && \
            docker stop game-container || true && \
            docker rm -f game-container || true && \
            docker run -d --name game-container -p 5173:4173 prosecco-party-vue:rollback"
          
          echo "Rollback completed. Application should be running the previous version."
      
      - name: Verify rollback
        if: failure() && steps.deploy.conclusion == 'success'
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "Verifying rollback..."
          sleep 15
          
          if curl -f https://proseccoparty.ch/ --connect-timeout 10; then
            echo "Rollback verification successful!"
          else
            echo "Rollback verification failed - manual intervention required!"
            exit 1
          fi
      
      - name: Notify on rollback
        if: failure() && steps.deploy.conclusion == 'success'
        run: |
          echo "::error::Deployment failed and was automatically rolled back to the previous version. Please check the logs and fix the issues before the next deployment."
      
      - name: Fail job after rollback
        if: failure() && steps.deploy.conclusion == 'success'
        run: |
          echo "Deployment failed - rollback completed but marking job as failed"
          exit 1